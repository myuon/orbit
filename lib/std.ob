let hp;

fun allocate_memory(size: int): [*]byte do
  let p = hp;
  hp = hp + size + 8; // +8 for size field

  let s = p as [*]int;
  s[0] = size;

  let b = p + 8;

  return b as [*]byte;
end

type slice(T: type) = struct {
  ptr: [*]T,
  len: int,

  fun _get(self: slice(T), index: int): T do
    return self.ptr[index];
  end

  fun _set(self: slice(T), index: int, value: T) do
    self.ptr[index] = value;
    return 0;
  end

  fun _new(len: int) do
    let pair = new struct { ptr: [*]T, len: int } { .ptr = allocate_memory(sizeof T * len) as [*]T, .len = len };
    return pair as slice(T);
  end
} extends {
  .key = int,
  .value = T,
};

type vec(T: type) = struct {
  ptr: [*]T,
  len: int,
  capacity: int,

  fun _get(self: vec(T), index: int): T do
    return self.ptr[index];
  end

  fun _set(self: vec(T), index: int, value: T) do
    self.ptr[index] = value;
    return 0;
  end

  fun new_with_capacity(capacity: int): vec(T) do
    let pair = new struct { ptr: [*]T, len: int, capacity: int } { .ptr = allocate_memory(sizeof T * capacity) as [*]T, .len = 0, .capacity = 128 };
    return pair as vec(T);
  end

  fun _new() do
    return (type vec(T)).new_with_capacity(128) as vec(T);
  end

  fun _push(self: vec(T), value: T): int do
    if (self.len + 1 < self.capacity) do
      let ptr = self.ptr;
      ptr[self.len] = value;
      self.len = self.len + 1;
    else
      let new_data = (type vec(T)).new_with_capacity(self.capacity * 2);
      new_data.len = self.len;
  
      let i = 0;
      while (i < self.len) do
        new_data[i] = self[i];
        i = i + 1;
      end

      new_data._push(value);
  
      self.ptr = new_data.ptr;
      self.len = new_data.len;
      self.capacity = new_data.capacity;
    end
  
    return 0;
  end
};

type entry(K: type, V: type) = struct {
  key: [*]K,
  value: V,
};

type optional(T: type) = struct {
  is_some: bool,
  value: T,
};

type hashmap(V: type) = struct {
  ptr: [*]entry(string, V),
  len: int,
  capacity: int,

  fun new_with_capacity(capacity: int): hashmap(V) do
    let pair = new struct { ptr: [*]entry(string, V), len: int, capacity: int } {
      .ptr = allocate_memory(sizeof entry(string, V) * capacity) as [*]entry(string, V),
      .len = 0,
      .capacity = capacity,
    };
    return pair as hashmap(V);
  end

  fun _new(): hashmap(V) do
    return (type hashmap(V)).new_with_capacity(128);
  end

  fun hash_key(key: string): uint do
    let hash = 2166136261 as uint;

    let i = 0;
    while (i < key.len) do
      hash = hash ^ (key[i] as uint);
      hash = hash * (16777619 as uint);
      i = i + 1;
    end

    return hash;
  end

  fun find_entry(self: hashmap(V), key: string): int do
    let index = (self.hash_key(key) as int) % self.capacity;

    while (true) do
      let entry = self.ptr[index];

      if (entry.key == nil || entry.key[0] == key) do
        return index;
      end

      index = (index + 1) % self.capacity;
    end

    return -1;
  end

  fun _get(self: hashmap(V), key: string): V do
    if (self.len == 0) do
      return nil as V;
    end

    let index = self.find_entry(key);

    if (index == -1) do
      return nil as V;
    end

    let entry = self.ptr[index];
    return entry.value;
  end

  fun _set(self: hashmap(V), key: string, value: V) do
    let index = self.find_entry(key);

    if (index == -1) do
      // error
      return nil;
    end

    let entry = self.ptr[index];
    if (entry.key == nil) do
      self.len = self.len + 1;
    end

    entry.key[0] = key;
    entry.value = value;

    return nil;
  end
};
